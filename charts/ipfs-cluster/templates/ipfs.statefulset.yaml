apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "helm-ipfs-cluster.ipfs-name" . }}
spec:
  serviceName: {{ include "helm-ipfs-cluster.ipfs-name" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "helm-ipfs-cluster.selectorLabels" . | nindent 6 }}
      nodeType: ipfs
  template:
    metadata:
      labels:
        {{- include "helm-ipfs-cluster.selectorLabels" . | nindent 8 }}
        nodeType: ipfs
    spec:
      {{- with .Values.ipfs.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm-ipfs-cluster.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.ipfs.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.p2pNodePort.enabled }}
        - name: init-nodeport
          image: "{{ .Values.p2pNodePort.initContainer.image.repository }}:{{ .Values.p2pNodePort.initContainer.image.tag }}"
          imagePullPolicy: {{.Values.p2pNodePort.initContainer.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              export EXTERNAL_PORT=$(kubectl get services {{ include "helm-ipfs-cluster.ipfs-name" . }}-p2p-nodeport -o jsonpath='{.spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              cat /env/init-nodeport;
              echo "#!/bin/sh" > /container-init.d/nodeport.sh;
              echo "set -ex" >> /container-init.d/nodeport.sh;
              echo "ipfs config Addresses.Announce \"[\\\"/ip4/$EXTERNAL_IP/tcp/$EXTERNAL_PORT\\\"]\" --json" >> /container-init.d/nodeport.sh;
              echo "ipfs config Addresses.Announce \"[\\\"/ip4/$EXTERNAL_IP/udp/$EXTERNAL_PORT/quic\\\"]\" --json" >> /container-init.d/nodeport.sh;
              echo "ipfs config Addresses.Announce \"[\\\"/ip4/$EXTERNAL_IP/udp/$EXTERNAL_PORT/quic-v1\\\"]\" --json" >> /container-init.d/nodeport.sh;
              echo "ipfs config Addresses.Announce \"[\\\"/ip4/$EXTERNAL_IP/udp/$EXTERNAL_PORT/quic-v1/webtransport\\\"]\" --json" >> /container-init.d/nodeport.sh;
              chmod +x /container-init.d/nodeport.sh;
          volumeMounts:
            - name: env-nodeport
              mountPath: /env
            - name: init-d
              mountPath: /container-init.d
      {{- end }}
      containers:
      - name: ipfs
        image: {{ .Values.ipfs.image.repository }}:{{ .Values.ipfs.image.tag }}
        ports:
        - containerPort: 4001
          name: swarm
          protocol: TCP
        - containerPort: 4001
          name: swarm-udp
          protocol: UDP
        - containerPort: 5001
          name: api
        - containerPort: 8080
          name: gateway
        - containerPort: 5353
          name: zeroconf
          protocol: UDP
          {{- if .Values.ipfs.extraEnv }}
        env:
          {{- toYaml .Values.ipfs.extraEnv | nindent 10 }}
          {{- end }}
#        livenessProbe:
#          httpGet:
#            path: /
#            port: gateway
#        readinessProbe:
#          httpGet:
#            path: /
#            port: gateway
        volumeMounts:
        - name: data
          mountPath: /data/ipfs
        {{- if .Values.p2pNodePort.enabled }}
        - name: env-nodeport
          mountPath: /env
        - name: init-d
          mountPath: /container-init.d
        {{- end }}
        resources:
          {{- toYaml .Values.ipfs.resources | nindent 12 }}
      {{- with .Values.ipfs.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.ipfs.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.ipfs.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.p2pNodePort.enabled }}
        - name: env-nodeport
          emptyDir: {}
        - name: init-d
          emptyDir: {}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- with .Values.ipfs.storage.storageClassName }}
      storageClassName: {{ . }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.ipfs.storage.volumeSize | default "1Gi" }}
